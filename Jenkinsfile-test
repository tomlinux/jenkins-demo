#!groovy
def PrintMes(value, color) {
  colors = ['red'   : "\033[40;31m >>>>>>>>>>>${value}<<<<<<<<<<< \033[0m",
              'blue'  : "\033[47;34m ${value} \033[0m",
              'green' : "[1;32m>>>>>>>>>>${value}>>>>>>>>>>[m",
              'green1' : "\033[40;32m >>>>>>>>>>>${value}<<<<<<<<<<< \033[0m" ]
  ansiColor('xterm') {
        println(colors[color])
  }
}

pipeline {
  agent { node 'jenkins-slave' }
  options {
    timestamps()
  }
  environment {
    TimeStamp = "${currentBuild.startTimeInMillis}"
    Service = "${JOB_BASE_NAME}"
    BRANCH_NAME = 'master'
    //gitlab webhook 回调功能
    Branch = "${env.gitlabTargetBranch}"
  }
  stages {
      stage('克隆代码') {
        steps {
          PrintMes('1.代码克隆和准备阶段', 'green')
          checkout scm
          script {
          BRANCH_NAME_TAG = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
          build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          Branch_Name = 'master'
          if (Branch_Name != 'master') {
            build_tag = "${Branch_Name}-${build_tag}"
          }
          println("build_tag的值是：${build_tag}")
          }
        }
      }
      stage('测试项目') {
        steps {
          input '确认要部署线上环境吗？'
          PrintMes('2.测试项目', 'green')
        }
      }
      stage('构建镜像') {
      steps {
            PrintMes('3.构建docker容器', 'green')
            timeout(time: 1, unit: 'MINUTES') {
              script {
                env.DEPLOY_ENV = input message: '选择部署的环境', ok: 'deploy',
                      parameters: [choice(name: 'DEPLOY_ENV', choices: ['prd', 'uat', 'test'], description: '选择部署环境')]
                switch ("${env.DEPLOY_ENV}") {
                case 'prd':
                    println('deploy prd env')
                    break
                case 'uat':
                    println('deploy uat env')
                    break
                case 'test':
                    println('deploy test env')
                    break
                default:
                    println('error env')
                }
              }
            }
      }
      }
      stage('上传镜像') {
      steps {
          PrintMes('4.推送docker镜像库', 'green')
      }
      }
      stage('发布') {
          steps {
            PrintMes('5. 发布k8s yaml', 'green')
          }
      }
  }
}
